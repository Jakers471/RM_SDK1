<?xml version="1.0" encoding="utf-8"?><testsuites name="pytest tests"><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="3.257" timestamp="2025-10-15T23:01:37.744710-05:00" hostname="DESKTOP-IEOHBKS"><testcase classname="tests.test_p0_1_max_contracts.TestMaxContractsIntegration" name="test_excess_contracts_closed_automatically" time="2.748"><failure message="assert 4 == 1">self = &lt;test_p0_1_max_contracts.TestMaxContractsIntegration object at 0x74673ff0ab70&gt;
state_manager = &lt;conftest.FakeStateManager object at 0x746740301d60&gt;
broker = &lt;conftest.FakeBrokerAdapter object at 0x7467404dfdd0&gt;
account_id = 'TEST_ACCOUNT_123'

    @pytest.mark.asyncio
    async def test_excess_contracts_closed_automatically(
        self,
        state_manager,
        broker,
        account_id
    ):
        """
        Test: When fill causes total to exceed limit, excess is closed.
    
        Scenario:
        - Limit: 4 contracts
        - Current: 2 MNQ long
        - New fill: 3 ES long
        - Expected: 1 ES closed immediately (total = 4)
        """
        # WILL FAIL: RiskEngine class doesn't exist yet
        from src.core.risk_engine import RiskEngine
        from src.rules.max_contracts import MaxContractsRule
        from src.core.enforcement_engine import EnforcementEngine
        from tests.conftest import Position, Event
    
        # Setup enforcement engine
        enforcement = EnforcementEngine(broker, state_manager)
    
        # Setup risk engine with MaxContracts rule
        rule = MaxContractsRule(max_contracts=4)
        risk_engine = RiskEngine(
            state_manager=state_manager,
            enforcement_engine=enforcement,
            rules=[rule]
        )
    
        # Add existing position: 2 MNQ
        pos1 = Position(
            position_id=uuid4(),
            account_id=account_id,
            symbol="MNQ",
            side="long",
            quantity=2,
            entry_price=Decimal("18000"),
            current_price=Decimal("18000"),
            unrealized_pnl=Decimal("0"),
            opened_at=state_manager.clock.now()
        )
        state_manager.add_position(account_id, pos1)
    
        # Simulate fill event: 3 ES long (would make total = 5)
        fill_event = Event(
            event_id=uuid4(),
            event_type="FILL",
            timestamp=state_manager.clock.now(),
            priority=2,
            account_id=account_id,
            source="broker",
            data={
                "symbol": "ES",
                "side": "long",
                "quantity": 3,
                "fill_price": Decimal("4500"),
                "order_id": "ORD123",
                "fill_time": state_manager.clock.now()
            }
        )
    
        # Process event through risk engine
        await risk_engine.process_event(fill_event)
    
        # Verify enforcement: should close 1 ES contract
        assert len(broker.close_position_calls) == 1
        close_call = broker.close_position_calls[0]
&gt;       assert close_call["quantity"] == 1
E       assert 4 == 1

tests/test_p0_1_max_contracts.py:254: AssertionError</failure></testcase></testsuite></testsuites>